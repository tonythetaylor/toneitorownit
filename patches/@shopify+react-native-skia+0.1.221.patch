diff --git a/node_modules/@shopify/react-native-skia/lib/module/Platform/Platform.web.js b/node_modules/@shopify/react-native-skia/lib/module/Platform/Platform.web.js
index 95b7ee2..ed64e21 100644
--- a/node_modules/@shopify/react-native-skia/lib/module/Platform/Platform.web.js
+++ b/node_modules/@shopify/react-native-skia/lib/module/Platform/Platform.web.js
@@ -123,9 +123,17 @@ const View = _ref => {
 
 export const Platform = {
   OS: "web",
-  PixelRatio: window.devicePixelRatio,
+  PixelRatio: typeof window !== "undefined" ? window.devicePixelRatio : 1,
   resolveAsset: source => {
     if (isRNModule(source)) {
+     if (typeof source === "number" && typeof require === "function") {
+       const {
+         getAssetByID,
+      } = require("react-native/Libraries/Image/AssetRegistry");
+      const { httpServerLocation, name, type } = getAssetByID(source);
+       const uri = `${httpServerLocation}/${name}.${type}`;
+      return uri;
+     }
       throw new Error("Image source is a number - this is not supported on the web");
     }
 
diff --git a/node_modules/@shopify/react-native-skia/lib/module/Platform/Platform.web.js.orig b/node_modules/@shopify/react-native-skia/lib/module/Platform/Platform.web.js.orig
new file mode 100644
index 0000000..ed64e21
--- /dev/null
+++ b/node_modules/@shopify/react-native-skia/lib/module/Platform/Platform.web.js.orig
@@ -0,0 +1,147 @@
+import React, { useLayoutEffect, useMemo, useRef } from "react";
+import { isRNModule } from "../skia/types";
+// eslint-disable-next-line max-len
+// https://github.com/necolas/react-native-web/blob/master/packages/react-native-web/src/modules/useElementLayout/index.js
+const DOM_LAYOUT_HANDLER_NAME = "__reactLayoutHandler";
+let resizeObserver = null;
+
+const getObserver = () => {
+  if (resizeObserver == null) {
+    resizeObserver = new window.ResizeObserver(function (entries) {
+      entries.forEach(entry => {
+        const node = entry.target;
+        const {
+          left,
+          top,
+          width,
+          height
+        } = entry.contentRect;
+        const onLayout = node[DOM_LAYOUT_HANDLER_NAME];
+
+        if (typeof onLayout === "function") {
+          // setTimeout 0 is taken from react-native-web (UIManager)
+          setTimeout(() => onLayout({
+            timeStamp: Date.now(),
+            nativeEvent: {
+              layout: {
+                x: left,
+                y: top,
+                width,
+                height
+              }
+            },
+            currentTarget: 0,
+            target: 0,
+            bubbles: false,
+            cancelable: false,
+            defaultPrevented: false,
+            eventPhase: 0,
+
+            isDefaultPrevented() {
+              throw new Error("Method not supported on web.");
+            },
+
+            isPropagationStopped() {
+              throw new Error("Method not supported on web.");
+            },
+
+            persist() {
+              throw new Error("Method not supported on web.");
+            },
+
+            preventDefault() {
+              throw new Error("Method not supported on web.");
+            },
+
+            stopPropagation() {
+              throw new Error("Method not supported on web.");
+            },
+
+            isTrusted: true,
+            type: ""
+          }), 0);
+        }
+      });
+    });
+  }
+
+  return resizeObserver;
+};
+
+const useElementLayout = (ref, onLayout) => {
+  const observer = getObserver();
+  useLayoutEffect(() => {
+    const node = ref.current;
+
+    if (node !== null) {
+      node[DOM_LAYOUT_HANDLER_NAME] = onLayout;
+    }
+  }, [ref, onLayout]);
+  useLayoutEffect(() => {
+    const node = ref.current;
+
+    if (node != null && observer != null) {
+      if (typeof node[DOM_LAYOUT_HANDLER_NAME] === "function") {
+        observer.observe(node);
+      } else {
+        observer.unobserve(node);
+      }
+    }
+
+    return () => {
+      if (node != null && observer != null) {
+        observer.unobserve(node);
+      }
+    };
+  }, [observer, ref]);
+};
+
+const View = _ref => {
+  let {
+    children,
+    onLayout,
+    style: rawStyle
+  } = _ref;
+  const style = useMemo(() => rawStyle !== null && rawStyle !== void 0 ? rawStyle : {}, [rawStyle]);
+  const ref = useRef(null);
+  useElementLayout(ref, onLayout);
+  const cssStyles = useMemo(() => {
+    return { ...style,
+      display: "flex",
+      flexDirection: style.flexDirection || "inherit",
+      flexWrap: style.flexWrap || "nowrap",
+      justifyContent: style.justifyContent || "flex-start",
+      alignItems: style.alignItems || "stretch",
+      alignContent: style.alignContent || "stretch"
+    };
+  }, [style]);
+  return /*#__PURE__*/React.createElement("div", {
+    ref: ref,
+    style: cssStyles
+  }, children);
+};
+
+export const Platform = {
+  OS: "web",
+  PixelRatio: typeof window !== "undefined" ? window.devicePixelRatio : 1,
+  resolveAsset: source => {
+    if (isRNModule(source)) {
+     if (typeof source === "number" && typeof require === "function") {
+       const {
+         getAssetByID,
+      } = require("react-native/Libraries/Image/AssetRegistry");
+      const { httpServerLocation, name, type } = getAssetByID(source);
+       const uri = `${httpServerLocation}/${name}.${type}`;
+      return uri;
+     }
+      throw new Error("Image source is a number - this is not supported on the web");
+    }
+
+    return source.default;
+  },
+  findNodeHandle: () => {
+    throw new Error("findNodeHandle is not supported on the web");
+  },
+  View
+};
+//# sourceMappingURL=Platform.web.js.map
\ No newline at end of file
diff --git a/node_modules/@shopify/react-native-skia/lib/module/Platform/Platform.web.js.rej b/node_modules/@shopify/react-native-skia/lib/module/Platform/Platform.web.js.rej
new file mode 100644
index 0000000..c647824
--- /dev/null
+++ b/node_modules/@shopify/react-native-skia/lib/module/Platform/Platform.web.js.rej
@@ -0,0 +1,19 @@
+@@ -123,9 +123,17 @@
+ 
+ export const Platform = {
+   OS: "web",
+-  PixelRatio: window.devicePixelRatio,
++  PixelRatio: typeof window !== "undefined" ? window.devicePixelRatio : 1,
+   resolveAsset: source => {
+     if (isRNModule(source)) {
++      if (typeof source === "number" && typeof require === "function") {
++        const {
++          getAssetByID,
++        } = require("react-native/Libraries/Image/AssetRegistry");
++        const { httpServerLocation, name, type } = getAssetByID(source);
++        const uri = `${httpServerLocation}/${name}.${type}`;
++        return uri;
++      }
+       throw new Error("Image source is a number - this is not supported on the web");
+     }
+ 
diff --git a/node_modules/@shopify/react-native-skia/scripts/setup-canvaskit.js b/node_modules/@shopify/react-native-skia/scripts/setup-canvaskit.js
index c151639..4395e5d 100755
--- a/node_modules/@shopify/react-native-skia/scripts/setup-canvaskit.js
+++ b/node_modules/@shopify/react-native-skia/scripts/setup-canvaskit.js
@@ -7,6 +7,7 @@
  * In `@expo/webpack-config` this is `./web` (default for now).
  *
  * This script does the following:
+ * 0. Try to detect if it's an expo project and if the bundler is set to metro
  * 1. Resolve the public path relative to wherever the script is being run.
  * 2. Log out some useful info about the web setup, just in case anything goes wrong.
  * 3. Resolve the installed wasm file `canvaskit-wasm/bin/full/canvaskit.wasm`
@@ -15,14 +16,18 @@
  *
  *
  * Usage:
- * $ `npx <script> web`
+ * $ `npx <script>`
  *
+ * On webpack:
  * -> Copies the file to `<project>/web/static/js/canvaskit.wasm`
+ * on metro:
+ * -> Copies the file to `<project>/public/canvaskit.wasm`
  *
- * Tooling that uses `/public`:
- * $ `npx <script> public`
+ * Tooling that uses a custom static assets folder, like `/assets` for example:
+ * $ `npx <script> assets`
+ *
+ * -> Copies the file to `<project>/assets/canvaskit.wasm`
  *
- * -> Copies the file to `<project>/public/static/js/canvaskit.wasm`
  */
 const fs = require("fs");
 const path = require("path");
@@ -32,6 +37,29 @@ const args = process.argv.slice(2);
 const gray = (text) => `\x1b[90m${text}\x1b[0m`;
 const lime = (text) => `\x1b[32m${text}\x1b[0m`;
 
+function getWetherItsAnExpoProjectWithMetro() {
+  try {
+    const appJsonPath = path.join(process.cwd(), 'app.json');
+
+    console.log(
+      `› Reading Expo settings from (if any):\n  ${gray(appJsonPath)}`
+    );
+
+    const appJson = require(appJsonPath);
+    const isAnExpoProjectWithMetro = appJson.expo && appJson.expo.web && appJson.expo.web.bundler === 'metro';
+    if (isAnExpoProjectWithMetro) {
+      console.log(`  ${gray(`Expo project with metro bundler detected`)}\n`);
+      return true;
+    } else {
+      console.log(`  ${gray(`Metro bundler not detected. Assuming the project is using Webpack.`)}\n`);
+      return false;
+    }
+  } catch (error) {
+    console.log(`  ${gray(`No Expo settings found`)}\n`);
+    return false;
+  }
+}
+
 function getWasmFilePath() {
   try {
     return require.resolve("canvaskit-wasm/bin/full/canvaskit.wasm");
@@ -43,14 +71,14 @@ function getWasmFilePath() {
   }
 }
 
-function getOutputFilePath() {
+function getOutputFilePath(isAnExpoProjectWithMetro) {
   // Default to using `web` public path.
-  const publicFolder = path.resolve(args[0] || "web");
-  const publicLocation = "./static/js/canvaskit.wasm";
+  const publicFolder = path.resolve(args[0] || (isAnExpoProjectWithMetro) ? "public" : "web/static/js");
+  const publicLocation = "./canvaskit.wasm";
   const output = path.join(publicFolder, publicLocation);
 
   console.log(
-    `› Copying 'canvaskit.wasm' file to static folder:\n  ${gray(output)}\n`
+    `› Copying 'canvaskit.wasm' file to public folder:\n  ${gray(output)}\n`
   );
   return output;
 }
@@ -61,9 +89,12 @@ function copyFile(from, to) {
   fs.writeFileSync(to, data);
 }
 
-// Copy the WASM file to `<static>/static/js/canvaskit.wasm`
 (() => {
-  copyFile(getWasmFilePath(), getOutputFilePath());
+  // Automatically detect if it's an expo project with a metro bundler
+  const isAnExpoProjectWithMetro = getWetherItsAnExpoProjectWithMetro();
+
+  // Copy the WASM file to `<static>/canvaskit.wasm`
+  copyFile(getWasmFilePath(), getOutputFilePath(isAnExpoProjectWithMetro));
 
   console.log(lime("› Success! You are almost there:"));
   console.log(
diff --git a/node_modules/@shopify/react-native-skia/scripts/setup-canvaskit.js.orig b/node_modules/@shopify/react-native-skia/scripts/setup-canvaskit.js.orig
new file mode 100755
index 0000000..c151639
--- /dev/null
+++ b/node_modules/@shopify/react-native-skia/scripts/setup-canvaskit.js.orig
@@ -0,0 +1,74 @@
+#!/usr/bin/env node
+/* eslint-disable max-len */
+
+/**
+ * A script to automate the setup of `@shopify/react-native-skia` for web.
+ * The only requirement is that your project supports a 'static' folder (often named '/public').
+ * In `@expo/webpack-config` this is `./web` (default for now).
+ *
+ * This script does the following:
+ * 1. Resolve the public path relative to wherever the script is being run.
+ * 2. Log out some useful info about the web setup, just in case anything goes wrong.
+ * 3. Resolve the installed wasm file `canvaskit-wasm/bin/full/canvaskit.wasm`
+ *  from `@shopify/react-native-skia -> canvaskit`.
+ * 4. Recursively ensure the path exists and copy the file into the desired location.
+ *
+ *
+ * Usage:
+ * $ `npx <script> web`
+ *
+ * -> Copies the file to `<project>/web/static/js/canvaskit.wasm`
+ *
+ * Tooling that uses `/public`:
+ * $ `npx <script> public`
+ *
+ * -> Copies the file to `<project>/public/static/js/canvaskit.wasm`
+ */
+const fs = require("fs");
+const path = require("path");
+
+const args = process.argv.slice(2);
+
+const gray = (text) => `\x1b[90m${text}\x1b[0m`;
+const lime = (text) => `\x1b[32m${text}\x1b[0m`;
+
+function getWasmFilePath() {
+  try {
+    return require.resolve("canvaskit-wasm/bin/full/canvaskit.wasm");
+  } catch (error) {
+    console.error(
+      `Could not find 'canvaskit-wasm'. Please install '@shopify/react-native-skia' and ensure it can be resolved from your project: ${process.cwd()}`
+    );
+    process.exit(1);
+  }
+}
+
+function getOutputFilePath() {
+  // Default to using `web` public path.
+  const publicFolder = path.resolve(args[0] || "web");
+  const publicLocation = "./static/js/canvaskit.wasm";
+  const output = path.join(publicFolder, publicLocation);
+
+  console.log(
+    `› Copying 'canvaskit.wasm' file to static folder:\n  ${gray(output)}\n`
+  );
+  return output;
+}
+
+function copyFile(from, to) {
+  const data = fs.readFileSync(from);
+  fs.mkdirSync(path.dirname(to), { recursive: true });
+  fs.writeFileSync(to, data);
+}
+
+// Copy the WASM file to `<static>/static/js/canvaskit.wasm`
+(() => {
+  copyFile(getWasmFilePath(), getOutputFilePath());
+
+  console.log(lime("› Success! You are almost there:"));
+  console.log(
+    gray(
+      "› To load React Native Skia Web, follow these instructions : https://shopify.github.io/react-native-skia/docs/getting-started/web"
+    )
+  );
+})();
